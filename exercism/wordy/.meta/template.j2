{%- import "generator_macros.j2" as macros with context -%}
{% macro test_case(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        {%- set question = case["input"]["question"] %}
        {%- if case is error_case %}
        with self.assertRaisesWithMessage(ValueError):
            {{ case["property"] }}("{{ question }}")
        {%- else %}
        self.assertEqual({{ case["property"] }}("{{ question }}"), {{ case["expected"] }})
        {%- endif %}
{%- endmacro %}
{{ macros.header() }}

class {{ exercise | camel_case }}Test(unittest.TestCase):
    {% for case in cases -%}
    {{ test_case(case) }}
    {% endfor %}
    {% if additional_cases | length -%}

    # Additional tests for this track

    {% for case in additional_cases -%}
    {{ test_case(case) }}
    {% endfor %}
    {%- endif %}


{{ macros.footer() }}
