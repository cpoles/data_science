?geom_smooth
# plotting drv as linetype
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv)
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
# show multiple geoms
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
# use a set of mappings to avoid redundancy
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point() +
geom_smooth()
# use a set of mappings to avoid redundancy
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
# overwriting the mapping argument for geom_point
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
# draw only the subcompact class as a line
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == 'subcompact')
se = FALSE
)
# draw only the subcompact class as a line
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == 'subcompact'),
se = FALSE
)
# draw only the subcompact class as a line
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == 'subcompact'),
se = TRUE
)
# recreate graphs
# use a set of mappings to avoid redundancy
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
# recreate graphs
# use a set of mappings to avoid redundancy
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(
se = FALSE
)
# recreate graphs
# use a set of mappings to avoid redundancy
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(
data = filter(mpg, drv == 'r'),
se = FALSE
)
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(
mapping = aes(linetype = drv)
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(
mapping = aes(linetype = drv),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point()
library(tidyverse)
# using diamonds dataset
diamonds
?diamonds
source('~/Programming/data_science/R/R_for_ds/data_viz/stats_transformation.R')
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
plot(cars)
```{r}
library(tidyverse)
plot(cars)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
library(tidyverse)
library(tidyverse)
library(tidyverse)
plot(cars)
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
library(tidyverse)
### Using the Diamonds Dataset
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
library(tidyverse)
# bar plot the cut variable
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# bar plot the cut variable
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?geom_bar
# using stat_count()
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
# map the height of the bars changing stat to 'identity'
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = 'identity'
)
# display a bar chart of proportion
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, y = ..prop.., group = 1 )
)
# plot the median using stat_summary
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
# plot the median using stat_summary
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_line(
mapping = aes(x = cut, y = depth), stat = 'median',
fun.min = min,
fun.max = max,
fun = median
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_col(
mapping = aes(x = cut, y = depth), stat = 'median',
fun.min = min,
fun.max = max,
fun = median
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_col(
mapping = aes(x = cut, y = depth), stat = 'median'
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth)
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth, ymin=min, ymax=max)
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=min, ymax=max)
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=min, ymax=max)
fun = median
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=min, ymax=max),
fun = median
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=min, ymax=max),
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=upper, ymax=lower),
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=upper, ymax=lower, width=0.2, size=1, color="blue", fill="white", shape=22)
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(ymin=min, ymax=max, width=0.2, size=1, color="blue", fill="white", shape=22)
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(
mapping = aes(stat = "summary",
fun.ymin = min,
fun.ymax = max,
fun.y = median)
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(mapping = aes(stat = "summary",
fun.ymin = min,
fun.ymax = max,
fun.y = median)
)
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_pointrange(mapping = aes(stat = "summary",
fun.ymin = min,
fun.ymax = max,
fun.y = median))
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth))
geom_linerange() +
geom_pointrange(mapping = aes(stat = "summary",
fun.ymin = min,
fun.ymax = max,
fun.y = median))
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth)) +
geom_linerange() +
geom_pointrange(mapping = aes(stat = "summary",
fun.ymin = min,
fun.ymax = max,
fun.y = median))
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth, ymin = min, ymax = max)) +
geom_linerange() +
geom_pointrange(mapping = aes(stat = "summary",
fun.y = median))
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth, stat = 'summary', ymin = min, ymax = max)) +
geom_linerange() +
geom_pointrange()
# plot the graph above using a geom
ggplot(data = diamonds, mapping = aes(x = cut, y = depth, stat = 'summary', ymin = min, ymax = max)) +
geom_linerange() +
geom_pointrange()
# plot the graph above using a geom
gggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "summary",
fun.min = min,
fun.max = max,
fun = median
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "summary",
fun.min = min,
fun.max = max,
fun = median
)
# using color, the bar borders will be coloured
ggplot(data = diamsonds) +
geom_bar(mapping = aes(x = cut, color = cut))
# using color, the bar borders will be coloured
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
# using fill, the bars will be filled with the colors
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
# using fill with a variable with many categories
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# position = 'fill'
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = 'fill'
)
# position = 'dodge'
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = 'dodge'
)
# position = 'jitter' - helps to improve scatterplot when variables are discrete
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = displ, fill = hwy),
position = 'jitter'
)
# position = 'jitter' - helps to improve scatterplot when variables are discrete
ggplot(data = diamonds) +
geom_point(
mapping = aes(x = displ, fill = hwy),
position = 'jitter'
)
# position = 'jitter' - helps to improve scatterplot when variables are discrete
ggplot(data = diamonds) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = 'jitter'
)
# position = 'jitter' - helps to improve scatterplot when variables are discrete
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = 'jitter'
)
# boxplot
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot()
# boxplot
ggplot(data = mpg, mapping = aes(x = cty)) +
geom_boxplot()
# boxplot with flipped axis
ggplot(data = mpg, mapping = aes(x = cty)) +
geom_boxplot() +
coord_flip()
# boxplot with flipped axis
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
# boxplot
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
# boxplot with flipped axis
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
# previous boxplot with flipped axis
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data('nz')
install.packages('maps')
library(tidyverse)
library(maps)
# bar plot the cut variable
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
# using stat_count()
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
# map the height of the bars changing stat to 'identity'
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = 'identity'
)
# display a bar chart of proportion
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, y = ..prop.., group = 1 )
)
# plot the median using stat_summary
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
# plot the graph above using a geom
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "summary",
fun.min = min,
fun.max = max,
fun = median
)
# using color, the bar borders will be coloured
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
# using fill, the bars will be filled with the colors
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
# using fill with a variable with many categories
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
# position = 'fill'
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = 'fill'
)
# position = 'dodge'
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = 'dodge'
)
# position = 'jitter' - helps to improve scatterplot when variables are discrete
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = 'jitter'
)
# boxplot
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
# previous boxplot with flipped axis
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data('nz')
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(fill = 'white', color = 'black')
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = 'white', color = 'black') +
coord_quickmap()
nz <- map_data('nz')
ggplot(data = nz, aes(long, lat, group = group)) +
geom_polygon(fill = 'white', color = 'black')
# adjust aspect ratio using coord_quickmap
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = 'white', color = 'black') +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
)
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
)
bar
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar
# add new layer coord_flip to bar
bar + coord_flip()
# switch axis
bar + coord_flip()
# using polar coordinates
bar + coord_polar()
View(bar)
test <- 2.5
test <- 3.5
test
seq(1, 10)
(y <- seq(1, 10, length.out = 5)
)
