{%- import "generator_macros.j2" as macros with context -%}
{% set imports = ["evaluate", "StackUnderflowError"] %}
{{ macros.header(imports=imports, ignore=ignore) }}

{% macro test_case(case) -%}
    def test_{{ case["description"] | to_snake }}(self):
        {%- if case is error_case %}
        {%- if case["expected"]["error"] == "divide by zero" %}
        # {{ case["expected"]["error"] }}
        with self.assertRaisesWithMessage(ZeroDivisionError):
        {%- else %}
        {%- if "stack" in case["expected"]["error"] %}
        with self.assertRaisesWithMessage(StackUnderflowError):
        {%- else %}
        with self.assertRaisesWithMessage(ValueError):
        {%- endif %}
        {%- endif %}
            {{ case["property"] }}({{ case["input"]["instructions"] }})
        {%- else %}
        self.assertEqual({{ case["property"] }}({{ case["input"]["instructions"] }}), {{ case["expected"] }})
        {%- endif %}
{%- endmacro %}

{%- macro superclass() -%}
    {{ exercise | camel_case }}Test
{%- endmacro -%}

class {{ superclass() }}(unittest.TestCase):
    {{ macros.utility() }}

{% for case in cases -%}
class {{ case["description"] | camel_case }}Test({{ superclass() }}):
    {% for subcase in case["cases"] -%}
    {{ test_case(subcase) }}
    {% endfor %}
{% endfor %}

{{ macros.footer() }}
